datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  password           String?
  emailVerified      DateTime?
  phoneNumber        String?
  role               UserRole  @default(USER)
  image              String?
  accounts           Account[] @relation("UserAccounts")
  isTwoFactorEnabled Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  Booking            Booking[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@index([email, token]) // unique index combination for email and token
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@index([email, token])
}

model Booking {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?       @db.ObjectId
  user        User?         @relation(fields: [userId], references: [id])
  bookingType BookingTypes
  bookingMode BookingMode   @default(now)
  status      BookingStatus @default(active)

  // Customer details
  passengerName String
  phoneNumber   String
  recipientName String? // For parcel bookings

  // Location details
  pickupLocation     String
  pickupCoordinates  Json // { lat: number, lng: number }
  dropoffLocation    String?
  dropoffCoordinates Json? // { lat: number, lng: number }

  // Booking details
  pickupDateTime DateTime
  hours          Int? // For hourly bookings
  vehicleType    VehicleType
  babySeat       Boolean     @default(false)
  flightNumber   String?

  // Payment details
  price           Float?
  paymentMethod   String?
  paymentStatus   String?
  paymentIntentId String?

  // Additional details
  notes   String?
  remarks String?

  // Related bookings 
  isReturnBooking Boolean   @default(false)
  parentBookingId String?   @db.ObjectId
  parentBooking   Booking?  @relation("ReturnBookings", fields: [parentBookingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  returnBookings  Booking[] @relation("ReturnBookings")

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Leads     Leads?

  @@index([userId])
  @@index([status])
  @@index([bookingType])
  @@index([pickupDateTime])
}

model Leads {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber        String   @unique
  email              String?
  assciatedBookingId String   @unique @db.ObjectId
  associatedBooking  Booking  @relation(fields: [assciatedBookingId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model AuditLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  action     String
  entityId   String
  entityType String
  userId     String?  @db.ObjectId
  details    Json
  createdAt  DateTime @default(now())
}

model IpTrack {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  ip         String
  sessionId  String?
  visitId    String?
  path       String
  userAgent  String?
  visitCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum BookingTypes {
  booking
  hourly
  parcel
}

enum BookingMode {
  now
  later
}

enum BookingStatus {
  active
  completed
  cancelled
  dismissed
}

enum VehicleType {
  sedan
  premium
  maxi
  suv
  wheelchair
  anyavailable
}
